"use strict";(self.webpackChunkopenedv_wiki=self.webpackChunkopenedv_wiki||[]).push([[9725],{6649:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>_,default:()=>l,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var i=s(4848),t=s(8453);const r={title:"\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c",sidebar_position:3},_="\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c",d={id:"Boards/DNK230D/example-ai/face_pose",title:"\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c",description:"\u524d\u8a00",source:"@site/docs/Boards/01_DNK230D/example-ai/face_pose.md",sourceDirName:"Boards/01_DNK230D/example-ai",slug:"/Boards/DNK230D/example-ai/face_pose",permalink:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/face_pose",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c",sidebar_position:3},sidebar:"DNK230DSidebar",previous:{title:"\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c",permalink:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/face_landmark"},next:{title:"\u4eba\u8138\u8bc6\u522b\u5b9e\u9a8c",permalink:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/face_recognition"}},o={},a=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"AI\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",id:"ai\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",level:2},{value:"\u786c\u4ef6\u8bbe\u8ba1",id:"\u786c\u4ef6\u8bbe\u8ba1",level:2},{value:"\u4f8b\u7a0b\u529f\u80fd",id:"\u4f8b\u7a0b\u529f\u80fd",level:3},{value:"\u786c\u4ef6\u8d44\u6e90",id:"\u786c\u4ef6\u8d44\u6e90",level:3},{value:"\u539f\u7406\u56fe",id:"\u539f\u7406\u56fe",level:3},{value:"\u5b9e\u9a8c\u4ee3\u7801",id:"\u5b9e\u9a8c\u4ee3\u7801",level:2},{value:"\u8fd0\u884c\u9a8c\u8bc1",id:"\u8fd0\u884c\u9a8c\u8bc1",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c",children:"\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c"})}),"\n",(0,i.jsx)(n.h2,{id:"\u524d\u8a00",children:"\u524d\u8a00"}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u5728CanMV\u4e0b\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u529f\u80fd\uff0c\u672c\u7ae0\u5c06\u901a\u8fc7\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c\uff0c\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u5b9e\u73b0\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5e76\u5c06\u4eba\u8138\u671d\u5411\u7ed8\u5236\u51fa\u6765\u3002\u5728\u672c\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u91c7\u96c6\u6444\u50cf\u5934\u6355\u83b7\u7684\u56fe\u50cf\uff0c\u7136\u540e\u7ecf\u8fc7\u56fe\u50cf\u9884\u5904\u7406\u3001\u6a21\u578b\u63a8\u7406\u548c\u8f93\u51fa\u5904\u7406\u7ed3\u679c\u7b49\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5b8c\u6210\u4eba\u8138\u68c0\u6d4b\u7684\u529f\u80fd\uff0c\u7136\u540e\u5728\u68c0\u6d4b\u5230\u4eba\u8138\u7684\u533a\u57df\uff0c\u8fdb\u4e00\u6b65\u4f7f\u7528\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u7684\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u4ece\u800c\u5c06\u4eba\u8138\u533a\u57df\u7684\u4eba\u8138\u671d\u5411\u89e3\u6790\u51fa\u6765\u3002\u6700\u540e\uff0c\u5c06\u68c0\u6d4b\u7ed3\u679c\u7ed8\u5236\u5e76\u663e\u793a\u5728\u663e\u793a\u5668\u4e0a\u3002\u901a\u8fc7\u672c\u7ae0\u7684\u5b66\u4e60\uff0c\u8bfb\u8005\u5c06\u638c\u63e1\u5982\u4f55\u5728CanMV\u4e0b\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u529f\u80fd\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"ai\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",children:"AI\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd"}),"\n",(0,i.jsxs)(n.p,{children:["\u6709\u5173AI\u5f00\u53d1\u6846\u67b6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u89c1",(0,i.jsx)(n.a,{href:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/development_framework",children:"CanMV AI\u5f00\u53d1\u6846\u67b6"})]}),"\n",(0,i.jsx)(n.h2,{id:"\u786c\u4ef6\u8bbe\u8ba1",children:"\u786c\u4ef6\u8bbe\u8ba1"}),"\n",(0,i.jsx)(n.h3,{id:"\u4f8b\u7a0b\u529f\u80fd",children:"\u4f8b\u7a0b\u529f\u80fd"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u7136\u540e\u5c06\u56fe\u50cf\u8f93\u5165\u5230CanMV K230D\u7684AI\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u672c\u5b9e\u9a8c\u4f7f\u7528\u4e86\u4e24\u4e2aAI\u6a21\u578b\uff0c\u4e00\u4e2a\u662f\u524d\u9762\u7ae0\u8282\u4f7f\u7528\u5230\u7684\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u7528\u4e8e\u8bc6\u522b\u4eba\u8138\u59ff\u6001\u89e3\u6790\u6a21\u578b\u3002\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8d1f\u8d23\u627e\u51fa\u56fe\u50cf\u4e2d\u7684\u4eba\u8138\u533a\u57df\uff0c\u7136\u540e\u5c06\u8be5\u533a\u57df\u4f20\u9012\u7ed9\u4eba\u8138\u59ff\u6001\u89e3\u6790\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u4eba\u8138\u59ff\u6001\u89e3\u6790\u6a21\u578b\u80fd\u591f\u5bf9\u68c0\u6d4b\u5230\u7684\u6bcf\u4e00\u4e2a\u4eba\u8138\u505a\u4eba\u8138\u59ff\u6001\u4f30\u8ba1\uff0c\u7136\u540e\u7528\u6b27\u62c9\u89d2\uff08roll/yaw/pitch\uff09\u8868\u793a\u4eba\u8138\u7684\u59ff\u6001\uff0croll\u8868\u793a\u4eba\u8138\u5de6\u53f3\u6447\u5934\u7684\u7a0b\u5ea6\uff0cyaw\u8868\u793a\u4eba\u8138\u5de6\u53f3\u65cb\u8f6c\u7684\u7a0b\u5ea6\uff0cpitch\u8868\u793a\u4eba\u8138\u4f4e\u5934\u62ac\u5934\u7684\u7a0b\u5ea6\u3002\u6211\u4eec\u6839\u636e\u4eba\u8138\u7684\u59ff\u6001\u89d2\u6784\u5efa\u53ef\u89c6\u5316\u7684\u77e9\u5f62\u6295\u5f71\uff0c\u6700\u540e\u5c06\u56fe\u50cf\u663e\u793a\u5728LCD\u4e0a\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\u786c\u4ef6\u8d44\u6e90",children:"\u786c\u4ef6\u8d44\u6e90"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u672c\u7ae0\u5b9e\u9a8c\u5185\u5bb9\u4e3b\u8981\u8bb2\u89e3K230D\u7684\u795e\u7ecf\u7f51\u7edc\u52a0\u901f\u5668KPU\u7684\u4f7f\u7528\uff0c\u65e0\u9700\u5173\u6ce8\u786c\u4ef6\u8d44\u6e90\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\u539f\u7406\u56fe",children:"\u539f\u7406\u56fe"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u672c\u7ae0\u5b9e\u9a8c\u5185\u5bb9\u4e3b\u8981\u8bb2\u89e3K230D\u7684\u795e\u7ecf\u7f51\u7edc\u52a0\u901f\u5668KPU\u7684\u4f7f\u7528\uff0c\u65e0\u9700\u5173\u6ce8\u539f\u7406\u56fe\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u5b9e\u9a8c\u4ee3\u7801",children:"\u5b9e\u9a8c\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from libs.PipeLine import PipeLine, ScopedTiming\nfrom libs.AIBase import AIBase\nfrom libs.AI2D import Ai2d\nimport os\nimport ujson\nfrom media.media import *\nfrom media.sensor import *\nfrom time import *\nimport nncase_runtime as nn\nimport ulab.numpy as np\nimport time\nimport image\nimport aidemo\nimport random\nimport gc\nimport sys\n\n# \u81ea\u5b9a\u4e49\u4eba\u8138\u68c0\u6d4b\u4efb\u52a1\u7c7b\nclass FaceDetApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,anchors,confidence_threshold=0.25,nms_threshold=0.3,rgb888p_size=[1280,720],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        # kmodel\u8def\u5f84\n        self.kmodel_path=kmodel_path\n        # \u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.confidence_threshold=confidence_threshold\n        # nms\u9608\u503c\n        self.nms_threshold=nms_threshold\n        self.anchors=anchors\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # \u5b9e\u4f8b\u5316Ai2d\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d=Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86pad\u548cresize\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            # \u8ba1\u7b97padding\u53c2\u6570\uff0c\u5e76\u8bbe\u7f6epadding\u9884\u5904\u7406\n            self.ai2d.pad(self.get_pad_param(), 0, [104,117,123])\n            # \u8bbe\u7f6eresize\u9884\u5904\u7406\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b,\u53c2\u6570\u4e3a\u9884\u5904\u7406\u8f93\u5165tensor\u7684shape\u548c\u9884\u5904\u7406\u8f93\u51fa\u7684tensor\u7684shape\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u540e\u5904\u7406\uff0cresults\u662f\u6a21\u578b\u8f93\u51fa\u7684array\u5217\u8868\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86aidemo\u5e93\u7684face_det_post_process\u63a5\u53e3\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            res = aidemo.face_det_post_process(self.confidence_threshold,self.nms_threshold,self.model_input_size[0],self.anchors,self.rgb888p_size,results)\n            if len(res)==0:\n                return res\n            else:\n                return res[0]\n\n    # \u8ba1\u7b97padding\u53c2\u6570\n    def get_pad_param(self):\n        dst_w = self.model_input_size[0]\n        dst_h = self.model_input_size[1]\n        # \u8ba1\u7b97\u6700\u5c0f\u7684\u7f29\u653e\u6bd4\u4f8b\uff0c\u7b49\u6bd4\u4f8b\u7f29\u653e\n        ratio_w = dst_w / self.rgb888p_size[0]\n        ratio_h = dst_h / self.rgb888p_size[1]\n        if ratio_w < ratio_h:\n            ratio = ratio_w\n        else:\n            ratio = ratio_h\n        new_w = (int)(ratio * self.rgb888p_size[0])\n        new_h = (int)(ratio * self.rgb888p_size[1])\n        dw = (dst_w - new_w) / 2\n        dh = (dst_h - new_h) / 2\n        top = (int)(round(0))\n        bottom = (int)(round(dh * 2 + 0.1))\n        left = (int)(round(0))\n        right = (int)(round(dw * 2 - 0.1))\n        return [0,0,0,0,top, bottom, left, right]\n\n# \u81ea\u5b9a\u4e49\u4eba\u8138\u59ff\u6001\u4efb\u52a1\u7c7b\nclass FacePoseApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,rgb888p_size=[1920,1080],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        # kmodel\u8def\u5f84\n        self.kmodel_path=kmodel_path\n        # \u4eba\u8138\u59ff\u6001\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # \u5b9e\u4f8b\u5316Ai2d\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d=Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86affine\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,det,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            # \u8ba1\u7b97affine\u77e9\u9635\u5e76\u8bbe\u7f6eaffine\u9884\u5904\u7406\n            matrix_dst = self.get_affine_matrix(det)\n            self.ai2d.affine(nn.interp_method.cv2_bilinear,0, 0, 127, 1,matrix_dst)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b,\u53c2\u6570\u4e3a\u9884\u5904\u7406\u8f93\u5165tensor\u7684shape\u548c\u9884\u5904\u7406\u8f93\u51fa\u7684tensor\u7684shape\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u540e\u5904\u7406\uff0cresults\u662f\u6a21\u578b\u8f93\u51fa\u7684array\u5217\u8868\uff0c\u8ba1\u7b97\u6b27\u62c9\u89d2\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            R,eular = self.get_euler(results[0][0])\n            return R,eular\n\n    def get_affine_matrix(self,bbox):\n        # \u83b7\u53d6\u4eff\u5c04\u77e9\u9635\uff0c\u7528\u4e8e\u5c06\u8fb9\u754c\u6846\u6620\u5c04\u5230\u6a21\u578b\u8f93\u5165\u7a7a\u95f4\n        with ScopedTiming("get_affine_matrix", self.debug_mode > 1):\n            # \u8bbe\u7f6e\u7f29\u653e\u56e0\u5b50\n            factor = 2.7\n            # \u4ece\u8fb9\u754c\u6846\u63d0\u53d6\u5750\u6807\u548c\u5c3a\u5bf8\n            x1, y1, w, h = map(lambda x: int(round(x, 0)), bbox[:4])\n            # \u6a21\u578b\u8f93\u5165\u5927\u5c0f\n            edge_size = self.model_input_size[1]\n            # \u5e73\u79fb\u8ddd\u79bb\uff0c\u4f7f\u5f97\u6a21\u578b\u8f93\u5165\u7a7a\u95f4\u7684\u4e2d\u5fc3\u5bf9\u51c6\u539f\u70b9\n            trans_distance = edge_size / 2.0\n            # \u8ba1\u7b97\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u7684\u5750\u6807\n            center_x = x1 + w / 2.0\n            center_y = y1 + h / 2.0\n            # \u8ba1\u7b97\u6700\u5927\u8fb9\u957f\n            maximum_edge = factor * (h if h > w else w)\n            # \u8ba1\u7b97\u7f29\u653e\u6bd4\u4f8b\n            scale = edge_size * 2.0 / maximum_edge\n            # \u8ba1\u7b97\u5e73\u79fb\u53c2\u6570\n            cx = trans_distance - scale * center_x\n            cy = trans_distance - scale * center_y\n            # \u521b\u5efa\u4eff\u5c04\u77e9\u9635\n            affine_matrix = [scale, 0, cx, 0, scale, cy]\n            return affine_matrix\n\n    def rotation_matrix_to_euler_angles(self,R):\n        # \u5c06\u65cb\u8f6c\u77e9\u9635\uff083x3 \u77e9\u9635\uff09\u8f6c\u6362\u4e3a\u6b27\u62c9\u89d2\uff08pitch\u3001yaw\u3001roll\uff09\n        # \u8ba1\u7b97 sin(yaw)\n        sy = np.sqrt(R[0, 0] ** 2 + R[1, 0] ** 2)\n        if sy < 1e-6:\n            # \u82e5 sin(yaw) \u8fc7\u5c0f\uff0c\u8bf4\u660e pitch \u63a5\u8fd1 \xb190 \u5ea6\n            pitch = np.arctan2(-R[1, 2], R[1, 1]) * 180 / np.pi\n            yaw = np.arctan2(-R[2, 0], sy) * 180 / np.pi\n            roll = 0\n        else:\n            # \u8ba1\u7b97 pitch\u3001yaw\u3001roll \u7684\u89d2\u5ea6\n            pitch = np.arctan2(R[2, 1], R[2, 2]) * 180 / np.pi\n            yaw = np.arctan2(-R[2, 0], sy) * 180 / np.pi\n            roll = np.arctan2(R[1, 0], R[0, 0]) * 180 / np.pi\n        return [pitch,yaw,roll]\n\n    def get_euler(self,data):\n        # \u83b7\u53d6\u65cb\u8f6c\u77e9\u9635\u548c\u6b27\u62c9\u89d2\n        R = data[:3, :3].copy()\n        eular = self.rotation_matrix_to_euler_angles(R)\n        return R,eular\n\n# \u4eba\u8138\u59ff\u6001\u4efb\u52a1\u7c7b\nclass FacePose:\n    def __init__(self,face_det_kmodel,face_pose_kmodel,det_input_size,pose_input_size,anchors,confidence_threshold=0.25,nms_threshold=0.3,rgb888p_size=[1280,720],display_size=[1920,1080],debug_mode=0):\n        # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8def\u5f84\n        self.face_det_kmodel=face_det_kmodel\n        # \u4eba\u8138\u59ff\u6001\u6a21\u578b\u8def\u5f84\n        self.face_pose_kmodel=face_pose_kmodel\n        # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.det_input_size=det_input_size\n        # \u4eba\u8138\u59ff\u6001\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.pose_input_size=pose_input_size\n        # anchors\n        self.anchors=anchors\n        # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.confidence_threshold=confidence_threshold\n        # nms\u9608\u503c\n        self.nms_threshold=nms_threshold\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug_mode\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        self.face_det=FaceDetApp(self.face_det_kmodel,model_input_size=self.det_input_size,anchors=self.anchors,confidence_threshold=self.confidence_threshold,nms_threshold=self.nms_threshold,rgb888p_size=self.rgb888p_size,display_size=self.display_size,debug_mode=0)\n        self.face_pose=FacePoseApp(self.face_pose_kmodel,model_input_size=self.pose_input_size,rgb888p_size=self.rgb888p_size,display_size=self.display_size)\n        self.face_det.config_preprocess()\n\n    # run\u51fd\u6570\n    def run(self,input_np):\n        # \u4eba\u8138\u68c0\u6d4b\n        det_boxes=self.face_det.run(input_np)\n        pose_res=[]\n        for det_box in det_boxes:\n            # \u5bf9\u68c0\u6d4b\u5230\u7684\u6bcf\u4e00\u4e2a\u4eba\u8138\u505a\u4eba\u8138\u59ff\u6001\u4f30\u8ba1\n            self.face_pose.config_preprocess(det_box)\n            R,eular=self.face_pose.run(input_np)\n            pose_res.append((R,eular))\n        return det_boxes,pose_res\n\n\n    # \u7ed8\u5236\u4eba\u8138\u59ff\u6001\u89d2\u6548\u679c\n    def draw_result(self,pl,dets,pose_res):\n        pl.osd_img.clear()\n        if dets:\n            draw_img_np = np.zeros((self.display_size[1],self.display_size[0],4),dtype=np.uint8)\n            draw_img=image.Image(self.display_size[0], self.display_size[1], image.ARGB8888,alloc=image.ALLOC_REF,data=draw_img_np)\n            line_color = np.array([255, 0, 0 ,255],dtype=np.uint8)    #bgra\n            for i,det in enumerate(dets):\n                # \uff081\uff09\u83b7\u53d6\u4eba\u8138\u59ff\u6001\u77e9\u9635\u548c\u6b27\u62c9\u89d2\n                projections,center_point = self.build_projection_matrix(det)\n                R,euler = pose_res[i]\n                # \uff082\uff09\u904d\u5386\u4eba\u8138\u6295\u5f71\u77e9\u9635\u7684\u5173\u952e\u70b9\uff0c\u8fdb\u884c\u6295\u5f71\uff0c\u5e76\u5c06\u7ed3\u679c\u753b\u5728\u56fe\u50cf\u4e0a\n                first_points = []\n                second_points = []\n                for pp in range(8):\n                    sum_x, sum_y = 0.0, 0.0\n                    for cc in range(3):\n                        sum_x += projections[pp][cc] * R[cc][0]\n                        sum_y += projections[pp][cc] * (-R[cc][1])\n                    center_x,center_y = center_point[0],center_point[1]\n                    x = (sum_x + center_x) / self.rgb888p_size[0] * self.display_size[0]\n                    y = (sum_y + center_y) / self.rgb888p_size[1] * self.display_size[1]\n                    x = max(0, min(x, self.display_size[0]))\n                    y = max(0, min(y, self.display_size[1]))\n                    if pp < 4:\n                        first_points.append((x, y))\n                    else:\n                        second_points.append((x, y))\n                first_points = np.array(first_points,dtype=np.float)\n                aidemo.polylines(draw_img_np,first_points,True,line_color,2,8,0)\n                second_points = np.array(second_points,dtype=np.float)\n                aidemo.polylines(draw_img_np,second_points,True,line_color,2,8,0)\n                for ll in range(4):\n                    x0, y0 = int(first_points[ll][0]),int(first_points[ll][1])\n                    x1, y1 = int(second_points[ll][0]),int(second_points[ll][1])\n                    draw_img.draw_line(x0, y0, x1, y1, color = (255, 0, 0 ,255), thickness = 2)\n            pl.osd_img.copy_from(draw_img)\n\n    def build_projection_matrix(self,det):\n        x1, y1, w, h = map(lambda x: int(round(x, 0)), det[:4])\n        # \u8ba1\u7b97\u8fb9\u754c\u6846\u4e2d\u5fc3\u5750\u6807\n        center_x = x1 + w / 2.0\n        center_y = y1 + h / 2.0\n        # \u5b9a\u4e49\u540e\u90e8\uff08rear\uff09\u548c\u524d\u90e8\uff08front\uff09\u7684\u5c3a\u5bf8\u548c\u6df1\u5ea6\n        rear_width = 0.5 * w\n        rear_height = 0.5 * h\n        rear_depth = 0\n        factor = np.sqrt(2.0)\n        front_width = factor * rear_width\n        front_height = factor * rear_height\n        front_depth = factor * rear_width  # \u4f7f\u7528\u5bbd\u5ea6\u6765\u8ba1\u7b97\u6df1\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9ad8\u5ea6\uff0c\u53d6\u51b3\u4e8e\u9700\u6c42\n        # \u5b9a\u4e49\u7acb\u65b9\u4f53\u7684\u9876\u70b9\u5750\u6807\n        temp = [\n            [-rear_width, -rear_height, rear_depth],\n            [-rear_width, rear_height, rear_depth],\n            [rear_width, rear_height, rear_depth],\n            [rear_width, -rear_height, rear_depth],\n            [-front_width, -front_height, front_depth],\n            [-front_width, front_height, front_depth],\n            [front_width, front_height, front_depth],\n            [front_width, -front_height, front_depth]\n        ]\n        projections = np.array(temp)\n        # \u8fd4\u56de\u6295\u5f71\u77e9\u9635\u548c\u4e2d\u5fc3\u5750\u6807\n        return projections, (center_x, center_y)\n\n\nif __name__=="__main__":\n    # \u663e\u793a\u6a21\u5f0f\uff0c\u9ed8\u8ba4"lcd"\n    display_mode="lcd"\n    display_size=[640,480]\n    # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8def\u5f84\n    face_det_kmodel_path="/sdcard/examples/kmodel/face_detection_320.kmodel"\n    # \u4eba\u8138\u59ff\u6001\u6a21\u578b\u8def\u5f84\n    face_pose_kmodel_path="/sdcard/examples/kmodel/face_pose.kmodel"\n    # \u5176\u5b83\u53c2\u6570\n    anchors_path="/sdcard/examples/utils/prior_data_320.bin"\n    rgb888p_size=[1280,960]\n    face_det_input_size=[320,320]\n    face_pose_input_size=[120,120]\n    confidence_threshold=0.5\n    nms_threshold=0.2\n    anchor_len=4200\n    det_dim=4\n    anchors = np.fromfile(anchors_path, dtype=np.float)\n    anchors = anchors.reshape((anchor_len,det_dim))\n\n    # \u521d\u59cb\u5316PipeLine\uff0c\u53ea\u5173\u6ce8\u4f20\u7ed9AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u663e\u793a\u7684\u5206\u8fa8\u7387\n    sensor = Sensor(width=1280, height=960) # \u6784\u5efa\u6444\u50cf\u5934\u5bf9\u8c61\n    pl = PipeLine(rgb888p_size=rgb888p_size, display_size=display_size, display_mode=display_mode)\n    pl.create(sensor=sensor)  # \u521b\u5efaPipeLine\u5b9e\u4f8b\n    fp=FacePose(face_det_kmodel_path,face_pose_kmodel_path,det_input_size=face_det_input_size,pose_input_size=face_pose_input_size,anchors=anchors,confidence_threshold=confidence_threshold,nms_threshold=nms_threshold,rgb888p_size=rgb888p_size,display_size=display_size)\n    try:\n        while True:\n            os.exitpoint()\n            with ScopedTiming("total",1):\n                img=pl.get_frame()                      # \u83b7\u53d6\u5f53\u524d\u5e27\n                det_boxes,pose_res=fp.run(img)          # \u63a8\u7406\u5f53\u524d\u5e27\n#                print(det_boxes,pose_res)               # \u6253\u5370\u7ed3\u679c\n                fp.draw_result(pl,det_boxes,pose_res)   # \u7ed8\u5236\u63a8\u7406\u6548\u679c\n                pl.show_image()                         # \u5c55\u793a\u63a8\u7406\u6548\u679c\n                gc.collect()\n    except Exception as e:\n        sys.print_exception(e)\n    finally:\n        fp.face_det.deinit()\n        fp.face_pose.deinit()\n        pl.destroy()\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230\u4e00\u5f00\u59cb\u662f\u5148\u5b9a\u4e49\u663e\u793a\u6a21\u5f0f\u3001\u56fe\u50cf\u5927\u5c0f\u3001\u6a21\u578b\u76f8\u5173\u7684\u4e00\u4e9b\u53d8\u91cf\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u63a5\u7740\u662f\u901a\u8fc7\u521d\u59cb\u5316PipeLine\uff0c\u8fd9\u91cc\u4e3b\u8981\u521d\u59cb\u5316sensor\u548cdisplay\u6a21\u5757\uff0c\u914d\u7f6e\u6444\u50cf\u5934\u8f93\u51fa\u4e24\u8def\u4e0d\u540c\u7684\u683c\u5f0f\u548c\u5927\u5c0f\u7684\u56fe\u50cf\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u663e\u793a\u6a21\u5f0f\uff0c\u5b8c\u6210\u521b\u5efaPipeLine\u5b9e\u4f8b\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u7136\u540e\u8c03\u7528\u81ea\u5b9a\u4e49FacePose\u7c7b\u6784\u5efa\u4eba\u8138\u59ff\u6001\u4efb\u52a1\u7c7b\uff0cFacePose\u7c7b\u4f1a\u901a\u8fc7\u8c03\u7528FaceDetApp\u7c7b\u548cFacePoseApp\u7c7b\u5b8c\u6210\u5bf9AIBase\u63a5\u53e3\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u4f7f\u7528Ai2D\u63a5\u53e3\u7684\u65b9\u6cd5\u5b9a\u4e49\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u548c\u4eba\u8138\u59ff\u6001\u89e3\u6790\u6a21\u578b\u8f93\u5165\u56fe\u50cf\u7684\u9884\u5904\u7406\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u540e\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4e0d\u65ad\u5730\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u7684RGBP888\u683c\u5f0f\u7684\u56fe\u50cf\u5e27\uff0c\u7136\u540e\u4f9d\u6b21\u5c06\u56fe\u50cf\u8f93\u5165\u5230\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u3001\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u7136\u540e\u5c06\u63a8\u7406\u7ed3\u679c\u901a\u8fc7print\u6253\u5370\uff0c\u540c\u65f6\u901a\u8fc7\u7ed3\u679c\u4fe1\u606f\u5c06\u4eba\u8138\u7684\u5173\u952e\u70b9\u7ed8\u5236\u5230\u56fe\u50cf\u4e0a\uff0c\u5e76\u5728LCD\u4e0a\u663e\u793a\u56fe\u50cf\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"\u8fd0\u884c\u9a8c\u8bc1",children:"\u8fd0\u884c\u9a8c\u8bc1"}),"\n",(0,i.jsx)(n.p,{children:"\u5b9e\u9a8c\u539f\u56fe\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(4713).A+"",width:"562",height:"673"})}),"\n",(0,i.jsx)(n.p,{children:"\u5c06K230D BOX\u5f00\u53d1\u677f\u8fde\u63a5CanMV IDE\uff0c\u70b9\u51fbCanMV IDE\u4e0a\u7684\u201c\u5f00\u59cb(\u8fd0\u884c\u811a\u672c)\u201d\u6309\u94ae\u540e\uff0c\u5c06\u6444\u50cf\u5934\u5bf9\u51c6\u4eba\u8138\uff0c\u8ba9\u5176\u91c7\u96c6\u5230\u4eba\u8138\u56fe\u50cf\uff0c\u968f\u540e\u4fbf\u80fd\u5728LCD\u4e0a\u770b\u5230\u6444\u50cf\u5934\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u540c\u65f6\u56fe\u50cf\u4e2d\u7684\u4eba\u8138\u59ff\u6001\u901a\u8fc7\u6784\u5efa\u6295\u5f71\u77e9\u9635\u7684\u65b9\u5f0f\u5b9e\u73b0\u4eba\u8138\u671d\u5411\u7684\u53ef\u89c6\u5316\u5c55\u793a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(8464).A+"",width:"518",height:"389"})})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},4713:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/06-f042b1de2db7f189cc482fe40381437b.png"},8464:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/07-cc53db78c0a787385c4a60a1503c1728.png"},8453:(e,n,s)=>{s.d(n,{R:()=>_,x:()=>d});var i=s(6540);const t={},r=i.createContext(t);function _(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:_(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);