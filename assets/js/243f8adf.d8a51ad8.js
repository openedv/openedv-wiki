"use strict";(self.webpackChunkopenedv_wiki=self.webpackChunkopenedv_wiki||[]).push([[7957],{6180:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>l});var s=i(4848),_=i(8453);const d={title:"\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c",sidebar_position:2},a="\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c",r={id:"Boards/DNK230D/example-ai/face_landmark",title:"\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c",description:"\u524d\u8a00",source:"@site/docs/Boards/01_DNK230D/example-ai/face_landmark.md",sourceDirName:"Boards/01_DNK230D/example-ai",slug:"/Boards/DNK230D/example-ai/face_landmark",permalink:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/face_landmark",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c",sidebar_position:2},sidebar:"DNK230DSidebar",previous:{title:"\u4eba\u8138\u68c0\u6d4b\u5b9e\u9a8c",permalink:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/face_detection"},next:{title:"\u4eba\u8138\u59ff\u6001\u68c0\u6d4b\u5b9e\u9a8c",permalink:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/face_pose"}},t={},l=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"AI\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",id:"ai\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",level:2},{value:"\u786c\u4ef6\u8bbe\u8ba1",id:"\u786c\u4ef6\u8bbe\u8ba1",level:2},{value:"\u4f8b\u7a0b\u529f\u80fd",id:"\u4f8b\u7a0b\u529f\u80fd",level:3},{value:"\u786c\u4ef6\u8d44\u6e90",id:"\u786c\u4ef6\u8d44\u6e90",level:3},{value:"\u539f\u7406\u56fe",id:"\u539f\u7406\u56fe",level:3},{value:"\u5b9e\u9a8c\u4ee3\u7801",id:"\u5b9e\u9a8c\u4ee3\u7801",level:2},{value:"\u8fd0\u884c\u9a8c\u8bc1",id:"\u8fd0\u884c\u9a8c\u8bc1",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,_.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c",children:"\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c"})}),"\n",(0,s.jsx)(n.h2,{id:"\u524d\u8a00",children:"\u524d\u8a00"}),"\n",(0,s.jsx)(n.p,{children:"\u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u5728CanMV\u4e0b\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u4eba\u8138\u68c0\u6d4b\u7684\u529f\u80fd\uff0c\u672c\u7ae0\u5c06\u901a\u8fc7\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u5b9e\u9a8c\uff0c\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u5b9e\u73b0\u4eba\u8138\u68c0\u6d4b\u5e76\u5c06\u4eba\u8138\u5173\u952e\u90e8\u4f4d\u7ed8\u5236\u51fa\u6765\u3002\u5728\u672c\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u91c7\u96c6\u6444\u50cf\u5934\u6355\u83b7\u7684\u56fe\u50cf\uff0c\u7136\u540e\u7ecf\u8fc7\u56fe\u50cf\u9884\u5904\u7406\u3001\u6a21\u578b\u63a8\u7406\u548c\u8f93\u51fa\u5904\u7406\u7ed3\u679c\u7b49\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u5b8c\u6210\u4eba\u8138\u68c0\u6d4b\u7684\u529f\u80fd\uff0c\u7136\u540e\u5728\u68c0\u6d4b\u5230\u4eba\u8138\u7684\u533a\u57df\uff0c\u8fdb\u4e00\u6b65\u4f7f\u7528\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u7684\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u4ece\u800c\u5c06\u8138\u90e8\u8f6e\u5ed3\u3001\u7709\u6bdb\u3001\u773c\u775b\u3001\u9f3b\u5b50\u548c\u5634\u5df4\u89e3\u6790\u51fa\u6765\u3002\u6700\u540e\uff0c\u5c06\u68c0\u6d4b\u7ed3\u679c\u7ed8\u5236\u5e76\u663e\u793a\u5230\u663e\u793a\u5668\u4e0a\u3002\u901a\u8fc7\u672c\u7ae0\u7684\u5b66\u4e60\uff0c\u8bfb\u8005\u5c06\u638c\u63e1\u5982\u4f55\u5728CanMV\u4e0b\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u529f\u80fd\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"ai\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",children:"AI\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd"}),"\n",(0,s.jsxs)(n.p,{children:["\u4e3a\u4e86\u7b80\u5316AI\u5f00\u53d1\u6d41\u7a0b\u5e76\u964d\u4f4eAI\u5f00\u53d1\u96be\u5ea6\uff0cCanMV\u5b98\u65b9\u9488\u5bf9K230D\u4e13\u95e8\u642d\u5efa\u4e86AI\u5f00\u53d1\u6846\u67b6\uff0c\u6709\u5173AI\u5f00\u53d1\u6846\u67b6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u89c1",(0,s.jsx)(n.a,{href:"/openedv_wiki/release/docs/Boards/DNK230D/example-ai/development_framework",children:"CanMV AI\u5f00\u53d1\u6846\u67b6"})]}),"\n",(0,s.jsx)(n.h2,{id:"\u786c\u4ef6\u8bbe\u8ba1",children:"\u786c\u4ef6\u8bbe\u8ba1"}),"\n",(0,s.jsx)(n.h3,{id:"\u4f8b\u7a0b\u529f\u80fd",children:"\u4f8b\u7a0b\u529f\u80fd"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u7136\u540e\u5c06\u56fe\u50cf\u8f93\u5165\u5230CanMV K230D\u7684AI\u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002\u672c\u5b9e\u9a8c\u4f7f\u7528\u4e86\u4e24\u4e2aAI\u6a21\u578b\uff1a\u4e00\u4e2a\u662f\u4e0a\u4e00\u7ae0\u8282\u4f7f\u7528\u5230\u7684\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u7528\u4e8e\u8bc6\u522b\u4eba\u8138\u5173\u952e\u70b9\u7684\u6a21\u578b\u3002\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8d1f\u8d23\u627e\u51fa\u56fe\u50cf\u4e2d\u7684\u4eba\u8138\u533a\u57df\uff0c\u7136\u540e\u5c06\u8be5\u533a\u57df\u4f20\u9012\u7ed9\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u6a21\u578b\u80fd\u591f\u8bc6\u522b\u51fa\u4eba\u8138\u7684\u8138\u90e8\u8f6e\u5ed3\u3001\u7709\u6bdb\u3001\u773c\u775b\u3001\u9f3b\u5b50\u548c\u5634\u5df4\uff0c\u7136\u540e\u7528\u4e0d\u540c\u989c\u8272\u7684\u7ebf\u6761\u7ed8\u5236\u5230\u56fe\u50cf\u4e0a\u3002\u6700\u540e\uff0c\u5c06\u5904\u7406\u540e\u7684\u56fe\u50cf\u663e\u793a\u5728LCD\u4e0a\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u786c\u4ef6\u8d44\u6e90",children:"\u786c\u4ef6\u8d44\u6e90"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u672c\u7ae0\u5b9e\u9a8c\u5185\u5bb9\u4e3b\u8981\u8bb2\u89e3K230D\u7684\u795e\u7ecf\u7f51\u7edc\u52a0\u901f\u5668KPU\u7684\u4f7f\u7528\uff0c\u65e0\u9700\u5173\u6ce8\u786c\u4ef6\u8d44\u6e90\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\u539f\u7406\u56fe",children:"\u539f\u7406\u56fe"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"\u672c\u7ae0\u5b9e\u9a8c\u5185\u5bb9\u4e3b\u8981\u8bb2\u89e3K230D\u7684\u795e\u7ecf\u7f51\u7edc\u52a0\u901f\u5668KPU\u7684\u4f7f\u7528\uff0c\u65e0\u9700\u5173\u6ce8\u539f\u7406\u56fe\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u5b9e\u9a8c\u4ee3\u7801",children:"\u5b9e\u9a8c\u4ee3\u7801"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from libs.PipeLine import PipeLine, ScopedTiming\nfrom libs.AIBase import AIBase\nfrom libs.AI2D import Ai2d\nimport os\nimport ujson\nfrom media.media import *\nfrom media.sensor import *\nfrom time import *\nimport nncase_runtime as nn\nimport ulab.numpy as np\nimport time\nimport image\nimport aidemo\nimport random\nimport gc\nimport sys\n\n# \u81ea\u5b9a\u4e49\u4eba\u8138\u68c0\u6d4b\u4efb\u52a1\u7c7b\nclass FaceDetApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,anchors,confidence_threshold=0.25,nms_threshold=0.3,rgb888p_size=[1280,720],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        # kmodel\u8def\u5f84\n        self.kmodel_path=kmodel_path\n        # \u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.confidence_threshold=confidence_threshold\n        # nms\u9608\u503c\n        self.nms_threshold=nms_threshold\n        # \u68c0\u6d4b\u4efb\u52a1\u951a\u6846\n        self.anchors=anchors\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # \u5b9e\u4f8b\u5316Ai2d\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d=Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86pad\u548cresize\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            # \u8bbe\u7f6epadding\u9884\u5904\u7406\n            self.ai2d.pad(self.get_pad_param(), 0, [104,117,123])\n            # \u8bbe\u7f6eresize\u9884\u5904\u7406\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b,\u53c2\u6570\u4e3a\u9884\u5904\u7406\u8f93\u5165tensor\u7684shape\u548c\u9884\u5904\u7406\u8f93\u51fa\u7684tensor\u7684shape\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u540e\u5904\u7406\uff0cresults\u662f\u6a21\u578b\u8f93\u51fa\u7684array\u5217\u8868\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86aidemo\u7684face_det_post_process\u5217\u8868\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            res = aidemo.face_det_post_process(self.confidence_threshold,self.nms_threshold,self.model_input_size[0],self.anchors,self.rgb888p_size,results)\n            if len(res)==0:\n                return res\n            else:\n                return res[0]\n\n    # \u8ba1\u7b97padding\u53c2\u6570\n    def get_pad_param(self):\n        dst_w = self.model_input_size[0]\n        dst_h = self.model_input_size[1]\n        # \u8ba1\u7b97\u6700\u5c0f\u7684\u7f29\u653e\u6bd4\u4f8b\uff0c\u7b49\u6bd4\u4f8b\u7f29\u653e\n        ratio_w = dst_w / self.rgb888p_size[0]\n        ratio_h = dst_h / self.rgb888p_size[1]\n        if ratio_w < ratio_h:\n            ratio = ratio_w\n        else:\n            ratio = ratio_h\n        new_w = (int)(ratio * self.rgb888p_size[0])\n        new_h = (int)(ratio * self.rgb888p_size[1])\n        dw = (dst_w - new_w) / 2\n        dh = (dst_h - new_h) / 2\n        top = (int)(round(0))\n        bottom = (int)(round(dh * 2 + 0.1))\n        left = (int)(round(0))\n        right = (int)(round(dw * 2 - 0.1))\n        return [0,0,0,0,top, bottom, left, right]\n\n# \u81ea\u5b9a\u4e49\u4eba\u8138\u5173\u952e\u70b9\u4efb\u52a1\u7c7b\nclass FaceLandMarkApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,rgb888p_size=[1920,1080],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        # kmodel\u8def\u5f84\n        self.kmodel_path=kmodel_path\n        # \u5173\u952e\u70b9\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug\u6a21\u5f0f\n        self.debug_mode=debug_mode\n        # \u76ee\u6807\u77e9\u9635\n        self.matrix_dst=None\n        self.ai2d=Ai2d(debug_mode)\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86affine\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,det,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            # \u8ba1\u7b97\u76ee\u6807\u77e9\u9635\uff0c\u5e76\u83b7\u53d6\u4eff\u5c04\u53d8\u6362\u77e9\u9635\n            self.matrix_dst = self.get_affine_matrix(det)\n            affine_matrix = [self.matrix_dst[0][0],self.matrix_dst[0][1],self.matrix_dst[0][2],\n                             self.matrix_dst[1][0],self.matrix_dst[1][1],self.matrix_dst[1][2]]\n            # \u8bbe\u7f6e\u4eff\u5c04\u53d8\u6362\u9884\u5904\u7406\n            self.ai2d.affine(nn.interp_method.cv2_bilinear,0, 0, 127, 1,affine_matrix)\n            # \u6784\u5efa\u9884\u5904\u7406\u6d41\u7a0b,\u53c2\u6570\u4e3a\u9884\u5904\u7406\u8f93\u5165tensor\u7684shape\u548c\u9884\u5904\u7406\u8f93\u51fa\u7684tensor\u7684shape\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u540e\u5904\u7406\uff0cresults\u662f\u6a21\u578b\u8f93\u51fa\u7684array\u5217\u8868\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86aidemo\u5e93\u7684invert_affine_transform\u63a5\u53e3\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            pred=results[0]\n            # \uff081\uff09\u5c06\u4eba\u8138\u5173\u952e\u70b9\u8f93\u51fa\u53d8\u6362\u6a21\u578b\u8f93\u5165\n            half_input_len = self.model_input_size[0] // 2\n            pred = pred.flatten()\n            for i in range(len(pred)):\n                pred[i] += (pred[i] + 1) * half_input_len\n            # \uff082\uff09\u83b7\u53d6\u4eff\u5c04\u77e9\u9635\u7684\u9006\u77e9\u9635\n            matrix_dst_inv = aidemo.invert_affine_transform(self.matrix_dst)\n            matrix_dst_inv = matrix_dst_inv.flatten()\n            # \uff083\uff09\u5bf9\u6bcf\u4e2a\u5173\u952e\u70b9\u8fdb\u884c\u9006\u53d8\u6362\n            half_out_len = len(pred) // 2\n            for kp_id in range(half_out_len):\n                old_x = pred[kp_id * 2]\n                old_y = pred[kp_id * 2 + 1]\n                # \u9006\u53d8\u6362\u516c\u5f0f\n                new_x = old_x * matrix_dst_inv[0] + old_y * matrix_dst_inv[1] + matrix_dst_inv[2]\n                new_y = old_x * matrix_dst_inv[3] + old_y * matrix_dst_inv[4] + matrix_dst_inv[5]\n                pred[kp_id * 2] = new_x\n                pred[kp_id * 2 + 1] = new_y\n            return pred\n\n    def get_affine_matrix(self,bbox):\n        # \u83b7\u53d6\u4eff\u5c04\u77e9\u9635\uff0c\u7528\u4e8e\u5c06\u8fb9\u754c\u6846\u6620\u5c04\u5230\u6a21\u578b\u8f93\u5165\u7a7a\u95f4\n        with ScopedTiming("get_affine_matrix", self.debug_mode > 1):\n            # \u4ece\u8fb9\u754c\u6846\u63d0\u53d6\u5750\u6807\u548c\u5c3a\u5bf8\n            x1, y1, w, h = map(lambda x: int(round(x, 0)), bbox[:4])\n            # \u8ba1\u7b97\u7f29\u653e\u6bd4\u4f8b\uff0c\u4f7f\u5f97\u8fb9\u754c\u6846\u6620\u5c04\u5230\u6a21\u578b\u8f93\u5165\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\n            scale_ratio = (self.model_input_size[0]) / (max(w, h) * 1.5)\n            # \u8ba1\u7b97\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u5728\u6a21\u578b\u8f93\u5165\u7a7a\u95f4\u7684\u5750\u6807\n            cx = (x1 + w / 2) * scale_ratio\n            cy = (y1 + h / 2) * scale_ratio\n            # \u8ba1\u7b97\u6a21\u578b\u8f93\u5165\u7a7a\u95f4\u7684\u4e00\u534a\u957f\u5ea6\n            half_input_len = self.model_input_size[0] / 2\n            # \u521b\u5efa\u4eff\u5c04\u77e9\u9635\u5e76\u8fdb\u884c\u8bbe\u7f6e\n            matrix_dst = np.zeros((2, 3), dtype=np.float)\n            matrix_dst[0, 0] = scale_ratio\n            matrix_dst[0, 1] = 0\n            matrix_dst[0, 2] = half_input_len - cx\n            matrix_dst[1, 0] = 0\n            matrix_dst[1, 1] = scale_ratio\n            matrix_dst[1, 2] = half_input_len - cy\n            return matrix_dst\n\n# \u4eba\u8138\u6807\u5fd7\u89e3\u6790\nclass FaceLandMark:\n    def __init__(self,face_det_kmodel,face_landmark_kmodel,det_input_size,landmark_input_size,anchors,confidence_threshold=0.25,nms_threshold=0.3,rgb888p_size=[1920,1080],display_size=[1920,1080],debug_mode=0):\n        # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8def\u5f84\n        self.face_det_kmodel=face_det_kmodel\n        # \u4eba\u8138\u6807\u5fd7\u89e3\u6790\u6a21\u578b\u8def\u5f84\n        self.face_landmark_kmodel=face_landmark_kmodel\n        # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.det_input_size=det_input_size\n        # \u4eba\u8138\u6807\u5fd7\u89e3\u6790\u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.landmark_input_size=landmark_input_size\n        # anchors\n        self.anchors=anchors\n        # \u7f6e\u4fe1\u5ea6\u9608\u503c\n        self.confidence_threshold=confidence_threshold\n        # nms\u9608\u503c\n        self.nms_threshold=nms_threshold\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u89c6\u9891\u8f93\u51faVO\u5206\u8fa8\u7387\uff0c\u5bbd16\u5b57\u8282\u5bf9\u9f50\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        # debug_mode\u6a21\u5f0f\n        self.debug_mode=debug_mode\n\n        # \u4eba\u8138\u5173\u952e\u70b9\u4e0d\u540c\u90e8\u4f4d\u5173\u952e\u70b9\u5217\u8868\n        self.dict_kp_seq = [\n            [43, 44, 45, 47, 46, 50, 51, 49, 48],              # left_eyebrow\n            [97, 98, 99, 100, 101, 105, 104, 103, 102],        # right_eyebrow\n            [35, 36, 33, 37, 39, 42, 40, 41],                  # left_eye\n            [89, 90, 87, 91, 93, 96, 94, 95],                  # right_eye\n            [34, 88],                                          # pupil\n            [72, 73, 74, 86],                                  # bridge_nose\n            [77, 78, 79, 80, 85, 84, 83],                      # wing_nose\n            [52, 55, 56, 53, 59, 58, 61, 68, 67, 71, 63, 64],  # out_lip\n            [65, 54, 60, 57, 69, 70, 62, 66],                  # in_lip\n            [1, 9, 10, 11, 12, 13, 14, 15, 16, 2, 3, 4, 5, 6, 7, 8, 0, 24, 23, 22, 21, 20, 19, 18, 32, 31, 30, 29, 28, 27, 26, 25, 17]  # basin\n        ]\n\n        # \u4eba\u8138\u5173\u952e\u70b9\u4e0d\u540c\u90e8\u4f4d\uff08\u987a\u5e8f\u540cdict_kp_seq\uff09\u989c\u8272\u914d\u7f6e\uff0cargb\n        self.color_list_for_osd_kp = [\n            (255, 0, 255, 0),\n            (255, 0, 255, 0),\n            (255, 255, 0, 255),\n            (255, 255, 0, 255),\n            (255, 255, 0, 0),\n            (255, 255, 170, 0),\n            (255, 255, 255, 0),\n            (255, 0, 255, 255),\n            (255, 255, 220, 50),\n            (255, 30, 30, 255)\n        ]\n        # \u4eba\u8138\u68c0\u6d4b\u5b9e\u4f8b\n        self.face_det=FaceDetApp(self.face_det_kmodel,model_input_size=self.det_input_size,anchors=self.anchors,confidence_threshold=self.confidence_threshold,nms_threshold=self.nms_threshold,rgb888p_size=self.rgb888p_size,display_size=self.display_size,debug_mode=0)\n        # \u4eba\u8138\u6807\u5fd7\u89e3\u6790\u5b9e\u4f8b\n        self.face_landmark=FaceLandMarkApp(self.face_landmark_kmodel,model_input_size=self.landmark_input_size,rgb888p_size=self.rgb888p_size,display_size=self.display_size)\n        # \u914d\u7f6e\u4eba\u8138\u68c0\u6d4b\u7684\u9884\u5904\u7406\n        self.face_det.config_preprocess()\n\n    # run\u51fd\u6570\n    def run(self,input_np):\n        # \u6267\u884c\u4eba\u8138\u68c0\u6d4b\n        det_boxes=self.face_det.run(input_np)\n        landmark_res=[]\n        for det_box in det_boxes:\n            # \u5bf9\u6bcf\u4e00\u4e2a\u68c0\u6d4b\u5230\u7684\u4eba\u8138\u89e3\u6790\u5173\u952e\u90e8\u4f4d\n            self.face_landmark.config_preprocess(det_box)\n            res=self.face_landmark.run(input_np)\n            landmark_res.append(res)\n        return det_boxes,landmark_res\n\n\n    # \u7ed8\u5236\u4eba\u8138\u89e3\u6790\u6548\u679c\n    def draw_result(self,pl,dets,landmark_res):\n        pl.osd_img.clear()\n        if dets:\n            draw_img_np = np.zeros((self.display_size[1],self.display_size[0],4),dtype=np.uint8)\n            draw_img = image.Image(self.display_size[0], self.display_size[1], image.ARGB8888, alloc=image.ALLOC_REF,data = draw_img_np)\n            for pred in landmark_res:\n                # \uff081\uff09\u83b7\u53d6\u5355\u4e2a\u4eba\u8138\u6846\u5bf9\u5e94\u7684\u4eba\u8138\u5173\u952e\u70b9\n                for sub_part_index in range(len(self.dict_kp_seq)):\n                    # \uff082\uff09\u6784\u5efa\u4eba\u8138\u67d0\u4e2a\u533a\u57df\u5173\u952e\u70b9\u96c6\n                    sub_part = self.dict_kp_seq[sub_part_index]\n                    face_sub_part_point_set = []\n                    for kp_index in range(len(sub_part)):\n                        real_kp_index = sub_part[kp_index]\n                        x, y = pred[real_kp_index * 2], pred[real_kp_index * 2 + 1]\n                        x = int(x * self.display_size[0] // self.rgb888p_size[0])\n                        y = int(y * self.display_size[1] // self.rgb888p_size[1])\n                        face_sub_part_point_set.append((x, y))\n                    # \uff083\uff09\u753b\u4eba\u8138\u4e0d\u540c\u533a\u57df\u7684\u8f6e\u5ed3\n                    if sub_part_index in (9, 6):\n                        color = np.array(self.color_list_for_osd_kp[sub_part_index],dtype = np.uint8)\n                        face_sub_part_point_set = np.array(face_sub_part_point_set)\n                        aidemo.polylines(draw_img_np, face_sub_part_point_set,False,color,5,8,0)\n                    elif sub_part_index == 4:\n                        color = self.color_list_for_osd_kp[sub_part_index]\n                        for kp in face_sub_part_point_set:\n                            x,y = kp[0],kp[1]\n                            draw_img.draw_circle(x,y ,2, color, 1)\n                    else:\n                        color = np.array(self.color_list_for_osd_kp[sub_part_index],dtype = np.uint8)\n                        face_sub_part_point_set = np.array(face_sub_part_point_set)\n                        aidemo.contours(draw_img_np, face_sub_part_point_set,-1,color,2,8)\n            pl.osd_img.copy_from(draw_img)\n\n\nif __name__=="__main__":\n    # \u663e\u793a\u6a21\u5f0f\uff0c\u9ed8\u8ba4"lcd"\n    display_mode="lcd"\n    display_size=[640,480]\n    # \u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u8def\u5f84\n    face_det_kmodel_path="/sdcard/examples/kmodel/face_detection_320.kmodel"\n    # \u4eba\u8138\u5173\u952e\u6807\u5fd7\u6a21\u578b\u8def\u5f84\n    face_landmark_kmodel_path="/sdcard/examples/kmodel/face_landmark.kmodel"\n    # \u5176\u5b83\u53c2\u6570\n    anchors_path="/sdcard/examples/utils/prior_data_320.bin"\n    rgb888p_size=[1280,960]\n    face_det_input_size=[320,320]\n    face_landmark_input_size=[192,192]\n    confidence_threshold=0.5\n    nms_threshold=0.2\n    anchor_len=4200\n    det_dim=4\n    anchors = np.fromfile(anchors_path, dtype=np.float)\n    anchors = anchors.reshape((anchor_len,det_dim))\n\n    # \u521d\u59cb\u5316PipeLine\uff0c\u53ea\u5173\u6ce8\u4f20\u7ed9AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\uff0c\u663e\u793a\u7684\u5206\u8fa8\u7387\n    sensor = Sensor(width=1280, height=960) # \u6784\u5efa\u6444\u50cf\u5934\u5bf9\u8c61\n    pl = PipeLine(rgb888p_size=rgb888p_size, display_size=display_size, display_mode=display_mode)\n    pl.create(sensor=sensor)  # \u521b\u5efaPipeLine\u5b9e\u4f8b\n    flm=FaceLandMark(face_det_kmodel_path,face_landmark_kmodel_path,det_input_size=face_det_input_size,landmark_input_size=face_landmark_input_size,anchors=anchors,confidence_threshold=confidence_threshold,nms_threshold=nms_threshold,rgb888p_size=rgb888p_size,display_size=display_size)\n    try:\n        while True:\n            os.exitpoint()\n            with ScopedTiming("total",1):\n                img=pl.get_frame()                          # \u83b7\u53d6\u5f53\u524d\u5e27\n                det_boxes,landmark_res=flm.run(img)         # \u63a8\u7406\u5f53\u524d\u5e27\n#                print(det_boxes,landmark_res)               # \u6253\u5370\u7ed3\u679c\n                flm.draw_result(pl,det_boxes,landmark_res)  # \u7ed8\u5236\u63a8\u7406\u7ed3\u679c\n                pl.show_image()                             # \u5c55\u793a\u63a8\u7406\u6548\u679c\n                gc.collect()\n    except Exception as e:\n        sys.print_exception(e)\n    finally:\n        flm.face_det.deinit()\n        flm.face_landmark.deinit()\n        pl.destroy()\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230\u9996\u5148\u662f\u5b9a\u4e49\u663e\u793a\u6a21\u5f0f\u3001\u56fe\u50cf\u5927\u5c0f\u3001\u6a21\u578b\u76f8\u5173\u7684\u4e00\u4e9b\u53d8\u91cf\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u63a5\u7740\u662f\u901a\u8fc7\u521d\u59cb\u5316PipeLine\uff0c\u8fd9\u91cc\u4e3b\u8981\u521d\u59cb\u5316sensor\u548cdisplay\u6a21\u5757\uff0c\u914d\u7f6e\u6444\u50cf\u5934\u8f93\u51fa\u4e24\u8def\u4e0d\u540c\u7684\u683c\u5f0f\u548c\u5927\u5c0f\u7684\u56fe\u50cf\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u663e\u793a\u6a21\u5f0f\uff0c\u5b8c\u6210\u521b\u5efaPipeLine\u5b9e\u4f8b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u7136\u540e\u8c03\u7528\u81ea\u5b9a\u4e49FaceLandMark\u7c7b\u6784\u5efa\u4eba\u8138\u5173\u952e\u70b9\u89e3\u6790\u7684\u4efb\u52a1\uff0cFaceLandMark\u7c7b\u4f1a\u901a\u8fc7\u8c03\u7528FaceDetApp\u7c7b\u548cFaceLandMarkApp\u7c7b\u5b8c\u6210\u5bf9AIBase\u63a5\u53e3\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u4f7f\u7528Ai2D\u63a5\u53e3\u7684\u65b9\u6cd5\u5b9a\u4e49\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u548c\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b\u6a21\u578b\u8f93\u5165\u56fe\u50cf\u7684\u9884\u5904\u7406\u65b9\u6cd5\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u6700\u540e\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4e0d\u65ad\u5730\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u7684RGBP888\u683c\u5f0f\u7684\u56fe\u50cf\u5e27\uff0c\u7136\u540e\u4f9d\u6b21\u5c06\u56fe\u50cf\u8f93\u5165\u5230\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u3001\u4eba\u8138\u5173\u952e\u70b9\u6807\u5fd7\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u7136\u540e\u5c06\u63a8\u7406\u7ed3\u679c\u901a\u8fc7print\u6253\u5370\uff0c\u540c\u65f6\u901a\u8fc7\u7ed3\u679c\u4fe1\u606f\u5c06\u4eba\u8138\u7684\u5173\u952e\u70b9\u7ed8\u5236\u5230\u56fe\u50cf\u4e0a\uff0c\u5e76\u5728LCD\u4e0a\u663e\u793a\u56fe\u50cf\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u8fd0\u884c\u9a8c\u8bc1",children:"\u8fd0\u884c\u9a8c\u8bc1"}),"\n",(0,s.jsx)(n.p,{children:"\u5b9e\u9a8c\u539f\u56fe\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"01",src:i(2294).A+"",width:"393",height:"373"})}),"\n",(0,s.jsx)(n.p,{children:"\u5c06K230D BOX\u5f00\u53d1\u677f\u8fde\u63a5CanMV IDE\uff0c\u70b9\u51fbCanMV IDE\u4e0a\u7684\u201c\u5f00\u59cb(\u8fd0\u884c\u811a\u672c)\u201d\u6309\u94ae\u540e\uff0c\u5c06\u6444\u50cf\u5934\u5bf9\u51c6\u4eba\u8138\uff0c\u8ba9\u5176\u91c7\u96c6\u5230\u4eba\u8138\u56fe\u50cf\uff0c\u968f\u540e\u4fbf\u80fd\u5728LCD\u4e0a\u770b\u5230\u6444\u50cf\u5934\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u540c\u65f6\u56fe\u50cf\u4e2d\u7684\u4eba\u8138\u7684\u8138\u90e8\u8f6e\u5ed3\u3001\u7709\u6bdb\u3001\u773c\u775b\u3001\u9f3b\u5b50\u548c\u5634\u5df4\u901a\u8fc7\u4e0d\u540c\u989c\u8272\u7684\u7ebf\u6761\u6807\u5fd7\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"01",src:i(2283).A+"",width:"509",height:"384"})}),"\n",(0,s.jsx)(n.p,{children:"\u70b9\u51fb\u5de6\u4e0b\u89d2\u201c\u4e32\u884c\u7ec8\u7aef\u201d\uff0c\u53ef\u4ee5\u770b\u5230\u201c\u4e32\u884c\u7ec8\u7aef\u201d\u7a97\u53e3\u4e2d\u8f93\u51fa\u4e86\u4e00\u7cfb\u5217\u4fe1\u606f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"01",src:i(1778).A+"",width:"1295",height:"166"})}),"\n",(0,s.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230\uff0c\u548c\u4e0a\u4e00\u7ae0\u8282\u4e0d\u540c\u7684\u662f\uff0c\u672c\u7ae0\u5b9e\u9a8c\u4e32\u53e3\u7ec8\u7aef\u6bcf\u6b21\u8f93\u51fa\u4e24\u4e2a\u6570\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u662f\u4eba\u8138\u68c0\u6d4b\u6a21\u578b\u68c0\u6d4b\u7684\u4eba\u8138\u533a\u57df\u7684\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u548c\u4e0a\u4e00\u7ae0\u4e00\u6837\uff0c\u8fd9\u91cc\u4e0d\u518d\u4ecb\u7ecd\uff0c\u53e6\u5916\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4array\u4e2d\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\uff0c\u8be5\u5143\u7d20\u540c\u6837\u662f\u662f\u6d6e\u70b9\u7c7b\u578b\u3002\u8fd9\u4e2a\u5143\u7d20\u5305\u542b\u4e86\u4eba\u8138\u4e2d\u6240\u6709\u7684\u5173\u952e\u70b9\u7684\u5750\u6807\uff08...\u662f\u5ffd\u7565\u7684\u90e8\u5206\u6570\u636e\uff09\uff0c\u6bcf\u4e24\u4e2a\u6d6e\u70b9\u6570\u8868\u793a\u4eba\u8138\u5173\u952e\u70b9\u7684x\u5750\u6807\u548cy\u5750\u6807\uff0c\u5e76\u4f9d\u7167\u7a0b\u5e8f\u4e2d\u5217\u8868dict_kp_seq\u63cf\u8ff0\u7684\u683c\u5f0f\u987a\u4fbf\u6392\u5217\uff08\u6bcf\u4e2a\u90e8\u4f4d\u5bf9\u5e94\u4e00\u6bb5\u6570\u636e\uff09\u3002\u6211\u4eec\u6839\u636e\u8fd9\u4e2a\u6392\u5e8f\u89c4\u5219\u518d\u901a\u8fc7\u7f29\u653e\u8ba1\u7b97\u5373\u53ef\u5b9a\u4f4d\u5230\u6bcf\u4e2a\u5173\u952e\u70b9\u5728LCD\u663e\u793a\u5668\u4e0a\u7684\u5b9e\u9645\u5750\u6807\uff0c\u8fd9\u70b9\u548c\u4e0a\u4e00\u7ae0\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u91cc\u4e0d\u518d\u8be6\u8ff0\u3002"})]})}function p(e={}){const{wrapper:n}={...(0,_.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},2294:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/01-244c94a9226e7b11e9cc721e39c861a2.png"},2283:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/04-eb51c95fe863f4c296b4a089e87bdace.png"},1778:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/05-509d4d97b7286909a143d4e72ccb82e6.png"},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var s=i(6540);const _={},d=s.createContext(_);function a(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(_):e.components||_:a(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);