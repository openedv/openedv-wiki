"use strict";(self.webpackChunkopenedv_wiki=self.webpackChunkopenedv_wiki||[]).push([[6898],{7496:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/59-3c4ba93ac7e393696bf9552a641fa44c.png"},21713:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/58-efd60555d4ba89df3159e1b21eb04b6f.png"},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var i=s(96540);const l={},r=i.createContext(l);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},62772:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/60-4a3dfaf0321ce08590cce09f2f0ac47b.png"},83901:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/61-f5e02c2771f8890ad0c296a25ff2d361.png"},93430:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/57-b90d2ebcd73b7ba956695773c746ff3a.png"},93962:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>d});var i=s(74848),l=s(28453);const r={title:"\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c",sidebar_position:20},a="\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c",t={id:"Boards/Kendryte/DNK230D/example-ai/self_learning",title:"\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c",description:"\u524d\u8a00",source:"@site/docs/Boards/Kendryte/DNK230D/example-ai/self_learning.md",sourceDirName:"Boards/Kendryte/DNK230D/example-ai",slug:"/Boards/Kendryte/DNK230D/example-ai/self_learning",permalink:"/docs/Boards/Kendryte/DNK230D/example-ai/self_learning",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c",sidebar_position:20},sidebar:"KendryteDNK230DSidebar",previous:{title:"\u5173\u952e\u8bcd\u5524\u9192\u5b9e\u9a8c",permalink:"/docs/Boards/Kendryte/DNK230D/example-ai/keyword_spotting"}},o={},d=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"AI\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",id:"ai\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",level:2},{value:"\u786c\u4ef6\u8bbe\u8ba1",id:"\u786c\u4ef6\u8bbe\u8ba1",level:2},{value:"\u4f8b\u7a0b\u529f\u80fd",id:"\u4f8b\u7a0b\u529f\u80fd",level:3},{value:"\u786c\u4ef6\u8d44\u6e90",id:"\u786c\u4ef6\u8d44\u6e90",level:3},{value:"\u539f\u7406\u56fe",id:"\u539f\u7406\u56fe",level:3},{value:"\u5b9e\u9a8c\u4ee3\u7801",id:"\u5b9e\u9a8c\u4ee3\u7801",level:2},{value:"\u8fd0\u884c\u9a8c\u8bc1",id:"\u8fd0\u884c\u9a8c\u8bc1",level:2}];function _(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c",children:"\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c"})}),"\n",(0,i.jsx)(n.h2,{id:"\u524d\u8a00",children:"\u524d\u8a00"}),"\n",(0,i.jsx)(n.p,{children:"\u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u5728CanMV\u4e0b\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u8bed\u97f3\u5173\u952e\u8bcd\u5524\u9192\u7684\u529f\u80fd\uff0c\u672c\u7ae0\u5c06\u901a\u8fc7\u81ea\u5b66\u4e60\u5206\u7c7b\u5b9e\u9a8c\uff0c\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u5b9e\u73b0\u57fa\u4e8e\u7279\u5f81\u8bc6\u522b\u7684\u81ea\u5b66\u4e60\u5206\u7c7b\u7684\u65b9\u6cd5\u3002\u5728\u672c\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u91c7\u96c6\u6444\u50cf\u5934\u6355\u83b7\u7684\u56fe\u50cf\uff0c\u7136\u540e\u7ecf\u8fc7\u56fe\u50cf\u9884\u5904\u7406\u3001\u6a21\u578b\u63a8\u7406\u548c\u8f93\u51fa\u5904\u7406\u7ed3\u679c\u7b49\u4e00\u7cfb\u5217\u6b65\u9aa4\uff0c\u7cfb\u7edf\u4fbf\u53ef\u83b7\u5f97\u7269\u4f53\u7684\u7279\u5f81\uff0c\u81ea\u5206\u7c7b\u5b66\u4e60\u529f\u80fd\u5c31\u662f\u57fa\u4e8e\u7269\u4f53\u7279\u5f81\u8bfb\u53d6\u8fd9\u4e2a\u539f\u7406\u3002\u6211\u4eec\u9996\u5148\u8bbe\u7f6e\u5f85\u5206\u7c7b\u7684\u6807\u7b7e\uff0c\u7136\u540e\u6839\u636e\u6807\u7b7e\u987a\u5e8f\u9010\u4e2a\u8bfb\u53d6\u9700\u8981\u5206\u7c7b\u7684\u7269\u4f53\u7279\u5f81\uff0c\u5b8c\u6210\u6bcf\u4e2a\u6807\u7b7e\u7684\u7279\u5f81\u503c\u8bfb\u53d6\u540e\u8fdb\u5165\u8bc6\u522b\u548c\u5206\u7c7b\u72b6\u6001\uff0c\u5c06\u6444\u50cf\u5934\u91c7\u96c6\u5230\u7684\u7269\u4f53\u56fe\u8fdb\u884c\u7279\u5f81\u503c\u8bfb\u53d6\uff0c\u7136\u540e\u4e0e\u6240\u6709\u6807\u7b7e\u7684\u7279\u5f81\u503c\u8fdb\u884c\u6bd4\u5bf9\uff0c\u6bd4\u5bf9\u5b8c\u6210\u540e\u5c06\u76f8\u4f3c\u5ea6\u9ad8\u7684\u6807\u7b7e\u540d\u4ee5\u53ca\u76f8\u4f3c\u5ea6\u8f93\u51fa\uff0c\u6700\u540e\uff0c\u5c06\u5206\u7c7b\u7ed3\u679c\u548c\u76f8\u4f3c\u5ea6\u7ed8\u5236\u5e76\u663e\u793a\u5230\u663e\u793a\u5668\u4e0a\u3002\u901a\u8fc7\u672c\u7ae0\u7684\u5b66\u4e60\uff0c\u8bfb\u8005\u5c06\u638c\u63e1\u5982\u4f55\u5728CanMV\u4e0b\u4f7f\u7528CanMV AI\u89c6\u89c9\u5f00\u53d1\u6846\u67b6\u548cMicroPython\u7f16\u7a0b\u65b9\u6cd5\u5b9e\u73b0\u81ea\u5b66\u4e60\u5206\u7c7b\u7684\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"ai\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd",children:"AI\u5f00\u53d1\u6846\u67b6\u4ecb\u7ecd"}),"\n",(0,i.jsxs)(n.p,{children:["\u4e3a\u4e86\u7b80\u5316AI\u5f00\u53d1\u6d41\u7a0b\u5e76\u964d\u4f4eAI\u5f00\u53d1\u96be\u5ea6\uff0cCanMV\u5b98\u65b9\u9488\u5bf9K230D\u4e13\u95e8\u642d\u5efa\u4e86AI\u5f00\u53d1\u6846\u67b6\uff0c\u6709\u5173AI\u5f00\u53d1\u6846\u67b6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u89c1",(0,i.jsx)(n.a,{href:"/docs/Boards/Kendryte/DNK230D/example-ai/development_framework",children:"CanMV AI\u5f00\u53d1\u6846\u67b6"})]}),"\n",(0,i.jsx)(n.h2,{id:"\u786c\u4ef6\u8bbe\u8ba1",children:"\u786c\u4ef6\u8bbe\u8ba1"}),"\n",(0,i.jsx)(n.h3,{id:"\u4f8b\u7a0b\u529f\u80fd",children:"\u4f8b\u7a0b\u529f\u80fd"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u7684\u56fe\u50cf\uff0c\u7136\u540e\u5c06\u56fe\u50cf\u8f93\u5165\u5230CanMV K230D\u7684AI\u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002\u672c\u5b9e\u9a8c\u4f7f\u7528\u4e86\u4e00\u4e2a\u80fd\u591f\u8fdb\u884c\u7279\u5f81\u503c\u8bfb\u53d6\u7684\u81ea\u5206\u7c7b\u5b66\u4e60\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u80fd\u591f\u5bf9\u8f93\u5165\u7684\u56fe\u50cf\u8fdb\u884c\u7279\u5f81\u503c\u89e3\u6790\u3002\u9996\u5148\uff0c\u8bbe\u7f6e\u9700\u8981\u5206\u7c7b\u7684\u6807\u7b7e\uff0c\u7136\u540e\u6839\u636e\u6807\u7b7e\u7684\u987a\u5e8f\u4f9d\u6b21\u5f55\u5165\u7269\u4f53\u7684\u7279\u5f81\u503c\uff0c\u5f53\u6240\u6709\u6807\u7b7e\u5f55\u5165\u5b8c\u6bd5\u540e\uff0c\u8fdb\u5165\u8bc6\u522b\u548c\u5206\u7c7b\u72b6\u6001\uff0c\u5c06\u6444\u50cf\u5934\u5bf9\u51c6\u9700\u8981\u5206\u7c7b\u7684\u7269\u4f53\uff0c\u8ba9\u7cfb\u7edf\u91c7\u96c6\u5230\u7279\u5f81\u503c\u5e76\u4e0e\u6bcf\u4e2a\u6807\u7b7e\u7684\u7279\u5f81\u503c\u8fdb\u884c\u5339\u914d\uff0c\u7136\u540e\u5c06\u5339\u914d\u7ed3\u679c\u8f93\u51fa\uff0c\u4ece\u800c\u5b9e\u73b0\u81ea\u5206\u7c7b\u5b66\u4e60\u7684\u529f\u80fd\uff0c\u6700\u540e\uff0c\u5c06\u5206\u7c7b\u7ed3\u679c\u548c\u76f8\u4f3c\u5ea6\u663e\u793a\u5728LCD\u4e0a\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\u786c\u4ef6\u8d44\u6e90",children:"\u786c\u4ef6\u8d44\u6e90"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u672c\u7ae0\u5b9e\u9a8c\u5185\u5bb9\u4e3b\u8981\u8bb2\u89e3K230D\u7684\u795e\u7ecf\u7f51\u7edc\u52a0\u901f\u5668KPU\u7684\u4f7f\u7528\uff0c\u65e0\u9700\u5173\u6ce8\u786c\u4ef6\u8d44\u6e90\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"\u539f\u7406\u56fe",children:"\u539f\u7406\u56fe"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u672c\u7ae0\u5b9e\u9a8c\u5185\u5bb9\u4e3b\u8981\u8bb2\u89e3K230D\u7684\u795e\u7ecf\u7f51\u7edc\u52a0\u901f\u5668KPU\u7684\u4f7f\u7528\uff0c\u65e0\u9700\u5173\u6ce8\u539f\u7406\u56fe\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u5b9e\u9a8c\u4ee3\u7801",children:"\u5b9e\u9a8c\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from libs.PipeLine import PipeLine, ScopedTiming\nfrom libs.AIBase import AIBase\nfrom libs.AI2D import Ai2d\nfrom machine import Pin\nfrom machine import FPIOA\nimport os\nimport ujson\nfrom media.media import *\nfrom media.sensor import *\nfrom time import *\nimport nncase_runtime as nn\nimport ulab.numpy as np\nimport time\nimport utime\nimport image\nimport random\nimport gc\nimport sys\nimport aicube\n\n# \u5c06GPIO0\u914d\u7f6e\u4e3a\u666e\u901aGPIO\u6a21\u5f0f\nfpioa = FPIOA()\nfpioa.set_function(35, FPIOA.GPIO35)\nkey1 = Pin(35, Pin.IN, pull=Pin.PULL_UP,drive=7) #\u6784\u5efakey1\u5bf9\u8c61\nkey_node = 0 #\u6309\u952e\u6807\u5fd7\u4f4d\n\n# \u81ea\u5b9a\u4e49\u81ea\u5b66\u4e60\u7c7b\nclass SelfLearningApp(AIBase):\n    def __init__(self,kmodel_path,model_input_size,labels,top_k,threshold,database_path,rgb888p_size=[224,224],display_size=[1920,1080],debug_mode=0):\n        super().__init__(kmodel_path,model_input_size,rgb888p_size,debug_mode)\n        self.kmodel_path=kmodel_path\n        # \u6a21\u578b\u8f93\u5165\u5206\u8fa8\u7387\n        self.model_input_size=model_input_size\n        self.labels=labels\n        self.database_path=database_path\n        # sensor\u7ed9\u5230AI\u7684\u56fe\u50cf\u5206\u8fa8\u7387\n        self.rgb888p_size=[ALIGN_UP(rgb888p_size[0],16),rgb888p_size[1]]\n        # \u663e\u793a\u5206\u8fa8\u7387\n        self.display_size=[ALIGN_UP(display_size[0],16),display_size[1]]\n        self.debug_mode=debug_mode\n        # \u8bc6\u522b\u9608\u503c\n        self.threshold = threshold\n        # \u9009\u62e9top_k\u4e2a\u76f8\u4f3c\u5ea6\u5927\u4e8e\u9608\u503c\u7684\u7ed3\u679c\u7c7b\u522b\n        self.top_k = top_k\n        #\u5bf9\u5e94\u7c7b\u522b\u6ce8\u518c\u7279\u5f81\u6570\u91cf\n        self.features= [2 for i in range(len(labels))]\n        #\u6ce8\u518c\u5355\u4e2a\u7279\u5f81\u4e2d\u9014\u95f4\u9694\u5e27\u6570\n        self.time_one=60\n        self.time_all = 0\n        self.time_now = 0\n        # \u7c7b\u522b\u7d22\u5f15\n        self.category_index = 0\n        # \u7279\u5f81\u5316\u90e8\u5206\u526a\u5207\u5bbd\u9ad8\n        self.crop_w = 400\n        self.crop_h = 400\n        # crop\u7684\u4f4d\u7f6e\n        self.crop_x = self.rgb888p_size[0] / 2.0 - self.crop_w / 2.0\n        self.crop_y = self.rgb888p_size[1] / 2.0 - self.crop_h / 2.0\n        self.crop_x_osd=0\n        self.crop_y_osd=0\n        self.crop_w_osd=0\n        self.crop_h_osd=0\n        # Ai2d\u5b9e\u4f8b\uff0c\u7528\u4e8e\u5b9e\u73b0\u6a21\u578b\u9884\u5904\u7406\n        self.ai2d=Ai2d(debug_mode)\n        # \u8bbe\u7f6eAi2d\u7684\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u548c\u7c7b\u578b\n        self.ai2d.set_ai2d_dtype(nn.ai2d_format.NCHW_FMT,nn.ai2d_format.NCHW_FMT,np.uint8, np.uint8)\n        self.data_init()\n\n    # \u914d\u7f6e\u9884\u5904\u7406\u64cd\u4f5c\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86crop\u548cresize\uff0cAi2d\u652f\u6301crop/shift/pad/resize/affine\uff0c\u5177\u4f53\u4ee3\u7801\u8bf7\u6253\u5f00/sdcard/app/libs/AI2D.py\u67e5\u770b\n    def config_preprocess(self,input_image_size=None):\n        with ScopedTiming("set preprocess config",self.debug_mode > 0):\n            # \u521d\u59cb\u5316ai2d\u9884\u5904\u7406\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3asensor\u7ed9\u5230AI\u7684\u5c3a\u5bf8\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6einput_image_size\u81ea\u884c\u4fee\u6539\u8f93\u5165\u5c3a\u5bf8\n            ai2d_input_size=input_image_size if input_image_size else self.rgb888p_size\n            self.ai2d.crop(int(self.crop_x),int(self.crop_y),int(self.crop_w),int(self.crop_h))\n            self.ai2d.resize(nn.interp_method.tf_bilinear, nn.interp_mode.half_pixel)\n            self.ai2d.build([1,3,ai2d_input_size[1],ai2d_input_size[0]],[1,3,self.model_input_size[1],self.model_input_size[0]])\n\n    # \u81ea\u5b9a\u4e49\u5f53\u524d\u4efb\u52a1\u7684\u540e\u5904\u7406\n    def postprocess(self,results):\n        with ScopedTiming("postprocess",self.debug_mode > 0):\n            return results[0][0]\n\n    # \u7ed8\u5236\u7ed3\u679c\uff0c\u7ed8\u5236\u7279\u5f81\u91c7\u96c6\u6846\u548c\u7279\u5f81\u5206\u7c7b\u6846\n    def draw_result(self,pl,feature):\n        global key_node\n        pl.osd_img.clear()\n        with ScopedTiming("display_draw",self.debug_mode >0):\n            pl.osd_img.draw_rectangle(self.crop_x_osd,self.crop_y_osd, self.crop_w_osd, self.crop_h_osd, color=(255, 255, 0, 255), thickness = 4)\n            if (self.category_index < len(self.labels)):\n                if key_node == 0:\n                    pl.osd_img.draw_string_advanced(50, self.crop_y_osd-50, 30,"\u8bf7\u5c06\u7269\u54c1["+self.labels[self.category_index]+"]\u653e\u5165\u6846,\u6309\u952e\u5f00\u59cb\u7279\u5f81\u91c7\u96c6\uff1a", color=(255,255,0,0))\n                if key_node == 1:\n                    self.time_now += 1\n                    pl.osd_img.draw_string_advanced(50, self.crop_y_osd-50, 30,"\u8bf7\u5c06\u5f85\u6dfb\u52a0\u7c7b\u522b\u653e\u5165\u6846\u5185\u8fdb\u884c\u7279\u5f81\u91c7\u96c6\uff1a"+self.labels[self.category_index] + "_" + str(int(self.time_now-1) // self.time_one) + ".bin", color=(255,255,0,0))\n                    with open(self.database_path + self.labels[self.category_index] + "_" + str(int(self.time_now-1) // self.time_one) + ".bin", \'wb\') as f:\n                        f.write(feature.tobytes())\n                    if (self.time_now // self.time_one == self.features[self.category_index]):\n                        self.category_index += 1\n                        self.time_all -= self.time_now\n                        self.time_now = 0\n                        key_node = 0 # \u7b2c\u4e00\u4e2a\u7269\u54c1\u8bc6\u522b\u5b8c\u6210\uff0c\u6e05\u7a7a\u6309\u952e\u6807\u5fd7\u4f4d\n            else:\n                results_learn = []\n                list_features = os.listdir(self.database_path)\n                for feature_name in list_features:\n                    with open(self.database_path + feature_name, \'rb\') as f:\n                        data = f.read()\n                    save_vec = np.frombuffer(data, dtype=np.float)\n                    score = self.getSimilarity(feature, save_vec)\n                    if (score > self.threshold):\n                        res = feature_name.split("_")\n                        is_same = False\n                        for r in results_learn:\n                            if (r["category"] ==  res[0]):\n                                if (r["score"] < score):\n                                    r["bin_file"] = feature_name\n                                    r["score"] = score\n                                is_same = True\n                        if (not is_same):\n                            if(len(results_learn) < self.top_k):\n                                evec = {}\n                                evec["category"] = res[0]\n                                evec["score"] = score\n                                evec["bin_file"] = feature_name\n                                results_learn.append( evec )\n                                results_learn = sorted(results_learn, key=lambda x: -x["score"])\n                            else:\n                                if( score <= results_learn[self.top_k-1]["score"] ):\n                                    continue\n                                else:\n                                    evec = {}\n                                    evec["category"] = res[0]\n                                    evec["score"] = score\n                                    evec["bin_file"] = feature_name\n                                    results_learn.append( evec )\n                                    results_learn = sorted(results_learn, key=lambda x: -x["score"])\n                                    results_learn.pop()\n                draw_y = 200\n                for r in results_learn:\n                    pl.osd_img.draw_string_advanced( 50 , draw_y,50,r["category"] + " : " + str(r["score"]), color=(255,255,0,0))\n                    draw_y += 50\n\n    #\u6570\u636e\u521d\u59cb\u5316\n    def data_init(self):\n        try:\n            os.mkdir(self.database_path)\n        except Exception as e:\n            pass\n        self.crop_x_osd = int(self.crop_x / self.rgb888p_size[0] * self.display_size[0])\n        self.crop_y_osd = int(self.crop_y / self.rgb888p_size[1] * self.display_size[1])\n        self.crop_w_osd = int(self.crop_w / self.rgb888p_size[0] * self.display_size[0])\n        self.crop_h_osd = int(self.crop_h / self.rgb888p_size[1] * self.display_size[1])\n        for i in range(len(self.labels)):\n            for j in range(self.features[i]):\n                self.time_all += self.time_one\n\n    # \u83b7\u53d6\u4e24\u4e2a\u7279\u5f81\u5411\u91cf\u7684\u76f8\u4f3c\u5ea6\n    def getSimilarity(self,output_vec,save_vec):\n        tmp = sum(output_vec * save_vec)\n        mold_out = np.sqrt(sum(output_vec * output_vec))\n        mold_save = np.sqrt(sum(save_vec * save_vec))\n        return tmp / (mold_out * mold_save)\n\n\nif __name__=="__main__":\n    # \u663e\u793a\u6a21\u5f0f\uff0c\u9ed8\u8ba4"lcd"\n    display_mode="lcd"\n    display_size=[640,480]\n    # \u6a21\u578b\u8def\u5f84\n    kmodel_path="/sdcard/examples/kmodel/recognition.kmodel"\n    database_path="/sdcard/examples/utils/features/"\n    # \u5176\u5b83\u53c2\u6570\u8bbe\u7f6e\n    rgb888p_size=[1280,960]\n    model_input_size=[224,224]\n    labels=["\u82f9\u679c","\u9999\u8549","\u68a8"]\n    top_k=3\n    threshold=0.5\n\n    # \u521d\u59cb\u5316PipeLine\n    sensor = Sensor(width=1280, height=960) # \u6784\u5efa\u6444\u50cf\u5934\u5bf9\u8c61\n    pl = PipeLine(rgb888p_size=rgb888p_size, display_size=display_size, display_mode=display_mode)\n    pl.create(sensor=sensor)  # \u521b\u5efaPipeLine\u5b9e\u4f8b\n    # \u521d\u59cb\u5316\u81ea\u5b66\u4e60\u5b9e\u4f8b\n    sl=SelfLearningApp(kmodel_path,model_input_size=model_input_size,labels=labels,top_k=top_k,threshold=threshold,database_path=database_path,rgb888p_size=rgb888p_size,display_size=display_size,debug_mode=0)\n    sl.config_preprocess()\n    try:\n        while True:\n            os.exitpoint()\n            with ScopedTiming("total",1):\n                #\u68c0\u6d4b\u6309\u952e\n                if key1.value()==0:   # \u6309\u952e\u88ab\u6309\u4e0b\n                    time.sleep_ms(10) # \u6d88\u9664\u6296\u52a8\n                    if key1.value()==0: # \u786e\u8ba4\u6309\u952e\u88ab\u6309\u4e0b\n                        print(\'key1\u88ab\u6309\u4e0b\')\n                        key_node = 1\n                        while not key1.value(): #\u68c0\u6d4b\u6309\u952e\u662f\u5426\u677e\u5f00\n                            pass\n                # \u83b7\u53d6\u5f53\u524d\u5e27\u6570\u636e\n                img=pl.get_frame()\n                # \u63a8\u7406\u5f53\u524d\u5e27\n                res=sl.run(img)\n                # \u6253\u5370\u7ed3\u679c\n                # print(res)\n                # \u7ed8\u5236\u7ed3\u679c\u5230PipeLine\u7684osd\u56fe\u50cf\n                sl.draw_result(pl,res)\n                # \u663e\u793a\u5f53\u524d\u7684\u7ed8\u5236\u7ed3\u679c\n                pl.show_image()\n                gc.collect()\n    except Exception as e:\n        sys.print_exception(e)\n    finally:\n        # \u5220\u9664features\u6587\u4ef6\u5939\n        stat_info = os.stat(database_path)\n        if (stat_info[0] & 0x4000):\n            list_files = os.listdir(database_path)\n            for l in list_files:\n                os.remove(database_path + l)\n        os.rmdir(database_path)\n        sl.deinit()\n        pl.destroy()\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230\u9996\u5148\u662f\u5b9a\u4e49\u663e\u793a\u6a21\u5f0f\u3001\u56fe\u50cf\u5927\u5c0f\u3001\u6a21\u578b\u76f8\u5173\u7684\u53d8\u91cf\u4ee5\u53ca\u5206\u7c7b\u7684\u6807\u7b7e\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u63a5\u7740\u662f\u901a\u8fc7\u521d\u59cb\u5316PipeLine\uff0c\u8fd9\u91cc\u4e3b\u8981\u521d\u59cb\u5316sensor\u548cdisplay\u6a21\u5757\uff0c\u914d\u7f6e\u6444\u50cf\u5934\u8f93\u51fa\u4e24\u8def\u4e0d\u540c\u7684\u683c\u5f0f\u548c\u5927\u5c0f\u7684\u56fe\u50cf\uff0c\u4ee5\u53ca\u8bbe\u7f6e\u663e\u793a\u6a21\u5f0f\uff0c\u5b8c\u6210\u521b\u5efaPipeLine\u5b9e\u4f8b\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u7136\u540e\u8c03\u7528\u81ea\u5b9a\u4e49SelfLearningApp\u7c7b\u6784\u5efa\u81ea\u5b66\u4e60\u7684\u4efb\u52a1\uff0cSelfLearningApp\u7c7b\u4f1a\u901a\u8fc7\u8c03\u7528AIBase\u63a5\u53e3\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u4f7f\u7528Ai2D\u63a5\u53e3\u7684\u65b9\u6cd5\u5b9a\u4e49\u81ea\u5b66\u4e60\u5206\u7c7b\u6d4b\u6a21\u578b\u8f93\u5165\u56fe\u50cf\u7684\u9884\u5904\u7406\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u540e\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u4e0d\u65ad\u5730\u83b7\u53d6\u6444\u50cf\u5934\u8f93\u51fa\u7684RGBP888\u683c\u5f0f\u7684\u56fe\u50cf\u5e27\uff0c\u7136\u540e\u4f9d\u6b21\u5c06\u56fe\u50cf\u8f93\u5165\u5230\u81ea\u5b66\u4e60\u5206\u7c7b\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u7136\u540e\u5c06\u63a8\u7406\u7ed3\u679c\u901a\u8fc7print\u6253\u5370\uff0c\u540c\u65f6\u5c06\u5206\u7c7b\u7684\u7ed3\u679c\u548c\u76f8\u4f3c\u5ea6\u7ed8\u5236\u5230\u56fe\u50cf\u4e0a\uff0c\u5e76\u5728LCD\u4e0a\u663e\u793a\u56fe\u50cf\u3002\u7cfb\u7edf\u5728\u7279\u5f81\u91c7\u96c6\u72b6\u6001\u4e0b\u53ef\u4ee5\u901a\u8fc7\u6309\u952eKEY1\u63a7\u5236\u6bcf\u4e2a\u6807\u7b7e\u7684\u7279\u5f81\u503c\u91c7\u96c6\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"\u8fd0\u884c\u9a8c\u8bc1",children:"\u8fd0\u884c\u9a8c\u8bc1"}),"\n",(0,i.jsx)(n.p,{children:"\u5b9e\u9a8c\u539f\u56fe\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(93430).A+"",width:"545",height:"718"})}),"\n",(0,i.jsx)(n.p,{children:"\u5c06K230D BOX\u5f00\u53d1\u677f\u8fde\u63a5CanMV IDE\uff0c\u70b9\u51fbCanMV IDE\u4e0a\u7684\u201c\u5f00\u59cb(\u8fd0\u884c\u811a\u672c)\u201d\u6309\u94ae\u540e\uff0c\u9996\u5148\u8fdb\u5165\u5206\u7c7b\u7269\u4f53\u7684\u7279\u5f81\u91c7\u96c6\u72b6\u6001\uff0c\u6211\u4eec\u8bbe\u7f6e\u4e86\u4e09\u79cd\u6807\u7b7e\uff0c\u4f9d\u6b21\u662f\u82f9\u679c\u3001\u9999\u8549\u548c\u68a8\uff0c\u9996\u5148\u5c06\u6444\u50cf\u5934\u5bf9\u51c6\u82f9\u679c\u533a\u57df\uff0c\u8ba9\u5176\u91c7\u96c6\u5230\u7684\u82f9\u679c\u533a\u57df\u5728\u65b9\u6846\u5185\uff0c\u7136\u540e\u6309\u4e0b\u6309\u952eKEY1\uff0c\u5f00\u59cb\u91c7\u96c6\u82f9\u679c\u7684\u7279\u5f81\u503c\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(21713).A+"",width:"515",height:"390"})}),"\n",(0,i.jsx)(n.p,{children:"\u82f9\u679c\u7279\u5f81\u91c7\u96c6\u5b8c\u540e\uff0c\u6211\u4eec\u7528\u540c\u6837\u65b9\u5f0f\u91c7\u96c6\u9999\u8549\u548c\u68a8\u7684\u7279\u5f81\u503c\uff0c\u5b8c\u6210\u91c7\u96c6\u540e\uff0c\u8fdb\u5165\u7269\u4f53\u5206\u7c7b\u72b6\u6001\uff0c\u5c06\u6444\u50cf\u5934\u4f9d\u6b21\u5bf9\u51c6\u82f9\u679c\u3002\u9999\u8549\u548c\u68a8\u7684\u56fe\u7247\uff0c\u7cfb\u7edf\u80fd\u591f\u8bc6\u522b\u51fa\u6765\uff0c\u5e76\u5c06\u6240\u5c5e\u5206\u7c7b\u663e\u793a\u5230\u5c4f\u5e55\u4e0a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(7496).A+"",width:"515",height:"388"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(62772).A+"",width:"451",height:"348"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"01",src:s(83901).A+"",width:"448",height:"366"})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}}}]);